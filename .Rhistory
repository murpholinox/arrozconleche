con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(
theme_bw() +
theme(legend.position = "right") #+
#scale_fill_brewer(palette = "Dark2")
)
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
df3<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))#
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(size = 12, angle = 45))
gpo_rar <- df1 %>%
filter(cta_gpo <= 10)
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 10") + theme(axis.text.x = element_text(size = 12, angle = 45))
#Una tabla
library(knitr)
library(kableExtra)
tabla<-head(df3, n=100)
kable(tabla) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
library(readr)
todo2 <- read_delim("/run/media/murphy/lolita/doctorado/extract/todo2",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
library(stringr)
# El locale de mi sistema, por lo tanto el de `R` está
# en inglés, por lo que `R` no reconoce el delimitador usado.
pdb<-todo2$X1
nde<-stringr::str_replace(todo2$X2, '�', '')
tde<-stringr::str_replace(todo2$X3, '�', '')
ide<-stringr::str_replace(todo2$X4, '�', '')
nom<-stringr::str_replace(todo2$X5, '�', '')
tec<-stringr::str_replace(todo2$X6, '�', '')
peh<-stringr::str_replace(todo2$X7, '�', '')
con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(
theme_bw() +
theme(legend.position = "right") #+
#scale_fill_brewer(palette = "Dark2")
)
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
df3<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))#
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(size = 12, angle = 45))
gpo_rar <- df1 %>%
filter(cta_gpo <= 10)
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 10") + theme(axis.text.x = element_text(size = 12, angle = 45))
#Una tabla
library(knitr)
library(kableExtra)
tabla<-head(df3, n=100)
kable(tabla) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
renv
renv::status()
renv::snapshot()
library(readr)
todo2 <- read_delim("/run/media/murphy/lolita/doctorado/extract/todo2",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
library(stringr)
# El locale de mi sistema, por lo tanto el de `R` está
# en inglés, por lo que `R` no reconoce el delimitador usado.
pdb<-todo2$X1
nde<-stringr::str_replace(todo2$X2, '�', '')
tde<-stringr::str_replace(todo2$X3, '�', '')
ide<-stringr::str_replace(todo2$X4, '�', '')
nom<-stringr::str_replace(todo2$X5, '�', '')
tec<-stringr::str_replace(todo2$X6, '�', '')
peh<-stringr::str_replace(todo2$X7, '�', '')
con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
library(readr)
todo2 <- read_delim("/run/media/murphy/lolita/doctorado/extract/todo2",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
library(stringr)
# El locale de mi sistema, por lo tanto el de `R` está
# en inglés, por lo que `R` no reconoce el delimitador usado.
pdb<-todo2$X1
nde<-stringr::str_replace(todo2$X2, '�', '')
tde<-stringr::str_replace(todo2$X3, '�', '')
ide<-stringr::str_replace(todo2$X4, '�', '')
nom<-stringr::str_replace(todo2$X5, '�', '')
tec<-stringr::str_replace(todo2$X6, '�', '')
peh<-stringr::str_replace(todo2$X7, '�', '')
con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
library(dplyr)
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
write.csv(df2,"/run/media/murphy/lolita/doctorado/clean/df2.csv", row.names = FALSE)
df3<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))#
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
gpo_rar <- df1 %>%
filter(cta_gpo <= 15)
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
# Una tabla
library(knitr)
library(kableExtra)
tabla<-head(df3, n=100)
kable(tabla) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
fi1 <- df2 %>%
filter(rs1 <= 2.0)
fil1 <- df2 %>%
filter(rs1 <= 2.0)
fil2 <-fil1 %>%
filter(!is.na(peh))
write_csv(fil2, file="/run/media/murphy/lolita/doctorado/clean/fil1.csv")
fil2 <-fil1 %>%
filter(!is.na(peh))
write_csv(fil2, "/run/media/murphy/lolita/doctorado/clean/fil1.csv")
write_csv2(fil2, "/run/media/murphy/lolita/doctorado/clean/fil2.csv")
write_delim(fil2, "/run/media/murphy/lolita/doctorado/clean/fil3.csv")
write_excel_csv(fil2, "/run/media/murphy/lolita/doctorado/clean/fil4.csv")
write_excel_csv2(fil2, "/run/media/murphy/lolita/doctorado/clean/fil5.csv")
library(readr)
fil2_imp <- read_delim("/run/media/murphy/lolita/doctorado/clean/fil2.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(fil2_imp)
View(fil2_imp)
library(readr)
nde_pdbs <- read_table2("/run/media/murphy/lolita/doctorado/clean/nde_pdbs")
View(nde_pdbs)
nde_pdbs <- read_table2("/run/media/murphy/lolita/doctorado/clean/nde_pdbs")
nde_pdbs_gt5 <- nde_pdbs %>%
filter(nde >= 5)
View(nde_pdbs_gt5)
nde_pdbs_gt5$pdbs
View(fil2)
renv::status()
renv::snapshot()
library(readr)
todo2 <- read_delim("/run/media/murphy/lolita/doctorado/extract/todo2",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
library(stringr)
# El locale de mi sistema, por lo tanto el de `R` está
# en inglés, por lo que `R` no reconoce el delimitador usado.
pdb<-todo2$X1
nde<-stringr::str_replace(todo2$X2, '�', '')
tde<-stringr::str_replace(todo2$X3, '�', '')
ide<-stringr::str_replace(todo2$X4, '�', '')
nom<-stringr::str_replace(todo2$X5, '�', '')
tec<-stringr::str_replace(todo2$X6, '�', '')
peh<-stringr::str_replace(todo2$X7, '�', '')
con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
# !!!  Ayer no sabía cómo hacer esto en `R`, así que pedí ayuda y mi papá hizo un macro en excel escrito en `VB`, Haly hizo un programa en `perl` y  hoy lo resolví con `python` (y después con `R`). Esto se encuentra documentado en los subdirectorios `ema/`, `mcr/` y `fmp/`, respectivamente.
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
library(dplyr)
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
df3<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))
df4<-datos %>%
count(tde, name = "cta_tde") %>%
arrange(desc(cta_tde))
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
gpo_rar <- df1 %>%
filter(cta_gpo <= 15)
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
# Una tabla
library(knitr)
library(kableExtra)
tabla_gpos<-head(df3, n=100)
kable(tabla_gpos) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Otra tabla
library(knitr)
library(kableExtra)
tabla_tdes<-head(df4, n=10)
kable(tabla_tdes) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Guarda los data frames
write_excel_csv2(df2, "/run/media/murphy/lolita/doctorado/extract/results.csv")
fil1 <- df2 %>%
filter(rs1 <= 2.0)
fil2 <-fil1 %>%
filter(!is.na(peh))
write_excel_csv2(fil2, "/run/media/murphy/lolita/doctorado/clean/fil2.csv")
#wc -l fil2.csv
#69689 fil2.csv
nde_pdbs <- read_table2("/run/media/murphy/lolita/doctorado/clean/nde_pdbs")
nde_pdbs_gt5 <- nde_pdbs %>%
filter(nde >= 5)
fil3 <- fil2 %>%
filter(pdb==nde_pdbs_gt5$pdbs)
View(fil3)
View(fil3)
nde_pdbs_gt5$pdbs
View(fil2)
nde_pdbs <- read_table2("/run/media/murphy/lolita/doctorado/clean/nde_pdbs")
nde_pdbs_gt5 <- nde_pdbs %>%
filter(nde >= 5)
fil3 <- fil2 %>%
filter(pdb %in% c("1G9Z", "1H8E", "1IHF", "1KX3", "1LP9", "1OGA", "1OWF", "1OWG", "1RM1", "1TEZ", "2BNQ", "2BNR", "2CK3", "2F53", "2JDI", "2P5E", "3MHS", "3MV7", "3OR3", "3RU4", "4G92", "4G9F", "4IOI", "4LOX", "4MWA", "5B0Z", "5M00", "5TEZ", "5U5F", "5U5M", "5X1E", "5Y0D", "6G9Q", "1KX5", "2HT0", "2VBL", "2VBN", "4F7U", "4FO6", "5T5I", "5W5C", "6EL3", "6S48", "1K8K", "6IPU", "2A06", "3CX5", "3WG7", "3X2Q", "5B1A", "5B1B", "5B3S", "5WAU", "5XDQ", "5XDX", "5Z84", "5Z85", "5Z86", "5ZCO", "5ZCP", "5ZCQ", "6J8M", "6JUW", "1RYP", "5IY5", "5LE5", "5LF1", "5LF4", "5LF7", "5LEY", "3WU2", "5B5E", "5B66", "5V2C", "4YBB"))
View(fil3)
View(fil3)
nde_pdbs <- read_table2("/run/media/murphy/lolita/doctorado/clean/nde_pdbs")
nde_pdbs_gt5 <- nde_pdbs %>%
filter(nde >= 5)
fil3 <- fil2 %>%
filter(!pdb %in% c("1G9Z", "1H8E", "1IHF", "1KX3", "1LP9", "1OGA", "1OWF", "1OWG", "1RM1", "1TEZ", "2BNQ", "2BNR", "2CK3", "2F53", "2JDI", "2P5E", "3MHS", "3MV7", "3OR3", "3RU4", "4G92", "4G9F", "4IOI", "4LOX", "4MWA", "5B0Z", "5M00", "5TEZ", "5U5F", "5U5M", "5X1E", "5Y0D", "6G9Q", "1KX5", "2HT0", "2VBL", "2VBN", "4F7U", "4FO6", "5T5I", "5W5C", "6EL3", "6S48", "1K8K", "6IPU", "2A06", "3CX5", "3WG7", "3X2Q", "5B1A", "5B1B", "5B3S", "5WAU", "5XDQ", "5XDX", "5Z84", "5Z85", "5Z86", "5ZCO", "5ZCP", "5ZCQ", "6J8M", "6JUW", "1RYP", "5IY5", "5LE5", "5LF1", "5LF4", "5LF7", "5LEY", "3WU2", "5B5E", "5B66", "5V2C", "4YBB"))
fil2 <-fil1 %>%
filter(!is.na(peh))
write_excel_csv2(fil2, "/run/media/murphy/lolita/doctorado/clean/fil2.csv")
#wc -l fil2.csv
#69689 fil2.csv
fil2 <-fil1 %>%
filter(!is.na(peh))
write_excel_csv2(fil2, "/run/media/murphy/lolita/doctorado/clean/fil2.csv")
#wc -l fil2.csv
#69689 fil2.csv
library(readr)
todo2 <- read_delim("/run/media/murphy/lolita/doctorado/extract/todo2",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
library(stringr)
# El locale de mi sistema, por lo tanto el de `R` está
# en inglés, por lo que `R` no reconoce el delimitador usado.
pdb<-todo2$X1
nde<-stringr::str_replace(todo2$X2, '�', '')
tde<-stringr::str_replace(todo2$X3, '�', '')
ide<-stringr::str_replace(todo2$X4, '�', '')
nom<-stringr::str_replace(todo2$X5, '�', '')
tec<-stringr::str_replace(todo2$X6, '�', '')
peh<-stringr::str_replace(todo2$X7, '�', '')
con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
# !!!  Ayer no sabía cómo hacer esto en `R`, así que pedí ayuda y mi papá hizo un macro en excel escrito en `VB`, Haly hizo un programa en `perl` y  hoy lo resolví con `python` (y después con `R`). Esto se encuentra documentado en los subdirectorios `ema/`, `mcr/` y `fmp/`, respectivamente.
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
datos$rs2<-as.numeric(as.character((datos$rs2)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
library(dplyr)
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
df3<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))
df4<-datos %>%
count(tde, name = "cta_tde") %>%
arrange(desc(cta_tde))
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
gpo_rar <- df1 %>%
filter(cta_gpo <= 15)
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
# Una tabla
library(knitr)
library(kableExtra)
tabla_gpos<-head(df3, n=100)
kable(tabla_gpos) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Otra tabla
library(knitr)
library(kableExtra)
tabla_tdes<-head(df4, n=10)
kable(tabla_tdes) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Guarda los data frames
write_excel_csv2(df2, "/run/media/murphy/lolita/doctorado/extract/results.csv")
fil1 <- df2 %>%
filter(rs1 <= 2.0)
fil2 <-fil1 %>%
filter(!is.na(peh))
write_excel_csv2(fil2, "/run/media/murphy/lolita/doctorado/clean/fil2.csv")
#wc -l fil2.csv
#69689 fil2.csv
library(readr)
fil3 <- read_delim("/run/media/murphy/lolita/doctorado/clean/fil3.csv",
";", escape_double = FALSE, comment = "*>",
trim_ws = TRUE)
View(fil3)
write_csv(df2, "/run/media/murphy/lolita/doctorado/extract/write1.csv")
write_csv2(df2, "/run/media/murphy/lolita/doctorado/extract/write2.csv")
write_delim(df2, "/run/media/murphy/lolita/doctorado/extract/write3.csv")
write_excel_csv(df2, "/run/media/murphy/lolita/doctorado/extract/write4.csv")
write_excel_csv2(df2, "/run/media/murphy/lolita/doctorado/extract/write5.csv")
write_tsv(df2, "/run/media/murphy/lolita/doctorado/extract/write6.csv")
library(readr)
todo2 <- read_delim("/run/media/murphy/lolita/doctorado/extract/todo2",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
library(stringr)
# El locale de mi sistema, por lo tanto el de `R` está
# en inglés, por lo que `R` no reconoce el delimitador usado.
pdb<-todo2$X1
nde<-stringr::str_replace(todo2$X2, '�', '')
tde<-stringr::str_replace(todo2$X3, '�', '')
ide<-stringr::str_replace(todo2$X4, '�', '')
nom<-stringr::str_replace(todo2$X5, '�', '')
tec<-stringr::str_replace(todo2$X6, '�', '')
peh<-stringr::str_replace(todo2$X7, '�', '')
con<-stringr::str_replace(todo2$X8, '�', '')
rs1<-stringr::str_replace(todo2$X9, '�', '')
rs2<-stringr::str_replace(todo2$X10, '�', '')
gpo<-stringr::str_replace(todo2$X11, '�', '')
doi<-stringr::str_replace(todo2$X12, '�', '')
# !!!  Ayer no sabía cómo hacer esto en `R`, así que pedí ayuda y mi papá hizo un macro en excel escrito en `VB`, Haly hizo un programa en `perl` y  hoy lo resolví con `python` (y después con `R`). Esto se encuentra documentado en los subdirectorios `ema/`, `mcr/` y `fmp/`, respectivamente.
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuando `R` crea el data.frame, escribe todo como factor
# El número de entidades, el pH y la resolución
# debe tratarse como número
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
datos$rs2<-as.numeric(as.character((datos$rs2)))
# Verificamos los datos al graficar algunas variables:
library(ggplot2)
library(RColorBrewer)
theme_set(theme_bw())
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
# Es lo mismo? Sí. La única diferencia es
# que las barras están separadas
#ggplot(data = datos, aes(x=nde)) + geom_bar() + labs(x="Número de entidades", y="Frecuencia")
library(dplyr)
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
df3<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))
df4<-datos %>%
count(tde, name = "cta_tde") %>%
arrange(desc(cta_tde))
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
gpo_rar <- df1 %>%
filter(cta_gpo <= 15)
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
# Una tabla
library(knitr)
library(kableExtra)
tabla_gpos<-head(df3, n=100)
kable(tabla_gpos) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Otra tabla
library(knitr)
library(kableExtra)
tabla_tdes<-head(df4, n=10)
kable(tabla_tdes) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
rm(todo2)
# Guarda los data frames
write_excel_csv(df2, "/run/media/murphy/lolita/doctorado/extract/results.csv")
fil1 <- df2 %>%
filter(rs1 <= 2.0)
fil2 <-fil1 %>%
filter(!is.na(peh))
write_excel_csv(fil2, "/run/media/murphy/lolita/doctorado/clean/fil2.csv")
#wc -l fil2.csv
#69689 fil2.csv
library(readr)
fil3 <- read_csv("/run/media/murphy/lolita/doctorado/clean/fil3.csv")
View(fil3)
View(fil3)
fil3 <- read_csv("/run/media/murphy/lolita/doctorado/clean/fil3.csv")
f3_cola <- fil3 %>%
count(ide, name="cta_ide") %>% # Colapsa los datos hacia n
arrange(desc(cta_ide))
f3_nocola <- fil3 %>% # Agrega n
add_count(ide, name="cta_ide") %>%
arrange(desc(cta_ide))
# Una tabla
tabla_f3_cola<-head(f3_cola, n=50)
kable(tabla_f3_cola) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
