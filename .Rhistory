ggsave("histograma_todo_xrays_res.svg", width = 20, units = "cm")
# Histograma del número de entidades.
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
ggsave("histograma_todo_xrays_nde.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_nde.svg", width = 20, units = "cm")
# Determina cuántos tipos de grupos espaciales y de entidades.
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
tab_gpo<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))
tab_tde<-datos %>%
count(tde, name = "cta_tde") %>%
arrange(desc(cta_tde))
# Gráfico de barras de los grupos espaciales.
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
ggsave("barras_todo_xrays_gpo.png", width = 20, units = "cm")
ggsave("barras_todo_xrays_gpo.svg", width = 20, units = "cm")
# Es interesante notar que el número de grupos espaciales es mayor a 65.
gpo_rar <- df2 %>%
filter(cta_gpo <= 15)
# Gráfico de barras de los grupos espaciales menos comunes.
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
ggsave("histograma_todo_xrays_gpo_rar.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_gpo_rar.svg", width = 20, units = "cm")
# Genera tablas.
# Tabla de grupos espaciales en el PDB.
kable(tab_gpo) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Tabla del tipo de entidades en el PDB.
kable(tab_tde) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
rm(info, df1, datos)
# Guarda los datos como `.csv`.
write_excel_csv(df2, "/run/media/murphy/lolita/doctorado/extract/df2.csv")
# Filtro 0
fil0 <-df2 %>%
filter(!ide =="") # Si no tiene identificador se va.
# Filtro 1
fil1 <- fil0 %>%
filter(rs1 <= 2.0) # Mala resolución no me sirve.
# Filtro 2
fil2 <-fil1 %>%
filter(!is.na(peh)) # Si no tiene pH se va.
setwd("/run/media/murphy/lolita/doctorado/clean")
write_excel_csv(fil0, "fil0.csv")
write_excel_csv(fil1, "fil1.csv")
write_excel_csv(fil2, "fil2.csv")
# Carga fil3.
fil3 <- read_csv("/run/media/murphy/lolita/doctorado/clean/fil3.csv")
fil3cola <- fil3 %>%
count(ide, name="cta_ide") %>% # Colapsa los datos hacia n
arrange(desc(cta_ide))
fil3nocola <- fil3 %>% # Agrega n a los datos
add_count(ide, name="cta_ide") %>%
arrange(desc(cta_ide))
# Una tabla
tab_fil3cola<-head(fil3cola, n=50) #Aquí escoge n.
kable(tab_fil3cola) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
setwd("/run/media/murphy/lolita/doctorado/clean")
write_excel_csv(fil3cola, "fil3cola.csv")
write_excel_csv(fil3nocola, "fil3nocola.csv")
write_excel_csv(tab_fil3cola, "tab_fil3cola.csv")
# Extrae el identificador de las 50 proteínas más representadas en el PDB.
ide_in_tf3c <- tab_fil3cola$ide
for (j in seq(1,50))
{
ide_i_ <-ide_in_tf3c[[j]]
filename <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/", ide_i_, sep="")
# Escribe un archivo por cada identificador, a partir de fil3.
write_excel_csv(filter(fil3, ide==ide_i_), filename)
}
# Extrae el identificador de las 50 proteínas más representadas en el PDB.
ide_in_tf3c <- tab_fil3cola$ide
for (j in seq(1,50))
{
ide_i_ <-ide_in_tf3c[[j]]
filename <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/", ide_i_, sep="")
# Escribe un archivo por cada identificador, a partir de fil3.
write_excel_csv(filter(fil3, ide==ide_i_), filename)
}
# Para cada proteína compara su secuencia canónica con su secuencia consenso.
# Se asigna una etiqueta "Wt" o "NotWt" dependiendo del resultado.
for (j in seq(1,50))
{
ide <-ide_in_tf3c[[j]] # identificador
file1 <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/can_seq_", ide, ".csv", sep="")
impo1 <- read_delim(file1, "¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
pdb<-impo1$X1
nde<-stringr::str_replace(impo1$X2, '�', '')
tde<-stringr::str_replace(impo1$X3, '�', '')
sec0<-stringr::str_replace(impo1$X4, '�', '')
sec<-stringr::str_replace_all(sec0, '\\\\n', '')
oname1 = paste("df", "_", ide, sep="")
assign(oname1, data.frame(pdb, nde, tde, sec))
file2 <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/cons_", ide, "_c", sep="")
impo2 <- read_csv(file2, col_names = FALSE)
oname2 = paste("cons_", ide, sep="")
assign(oname2, impo2$X1)
n<-nrow(get(oname1))
bad_seq<-c() # Vacío
for(i in seq(1, n)) {
y <- adist(get(oname1)$sec[i], get(oname2))
if(y >= 15)
{bad_seq <- c(bad_seq, "NotWt")}
else
{bad_seq <- c(bad_seq, "Wt")}
}
assign(oname1, cbind(get(oname1), bad_seq))
file3 <-paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/fil4_", ide, sep="")
write_excel_csv(get(oname1), file3)
}
# Aplica finalmente el filtro 4 sobre las 50 proteínas más representadas.
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/msa")
info_fil3 <- read_delim("information_from_fil3", "¿", escape_double = FALSE, col_names = FALSE, comment = "*>", trim_ws = TRUE)
almost_fil4 <- read_csv("almost_fil4", col_names = FALSE)
almost_fil4<-rename(almost_fil4, bad=X5)
allbadseqs <-select(almost_fil4, bad)
nearly_almost_fil4<-cbind(info_fil3, allbadseqs)
pdb<-nearly_almost_fil4$X1
nde<-stringr::str_replace(nearly_almost_fil4$X2, '�', '')
tde<-stringr::str_replace(nearly_almost_fil4$X3, '�', '')
ide<-stringr::str_replace(nearly_almost_fil4$X4, '�', '')
nom<-stringr::str_replace(nearly_almost_fil4$X5, '�', '')
tec<-stringr::str_replace(nearly_almost_fil4$X6, '�', '')
peh<-stringr::str_replace(nearly_almost_fil4$X7, '�', '')
con<-stringr::str_replace(nearly_almost_fil4$X8, '�', '')
rs1<-stringr::str_replace(nearly_almost_fil4$X9, '�', '')
rs2<-stringr::str_replace(nearly_almost_fil4$X10, '�', '')
gpo<-stringr::str_replace(nearly_almost_fil4$X11, '�', '')
doi<-stringr::str_replace(nearly_almost_fil4$X12, '�', '')
sil<-nearly_almost_fil4$bad
closest_to_fil4<-tibble(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi, sil)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi, sil)
# Cuidado con el tipo de las columnas, de nuevo.
closest_to_fil4$nde<-as.numeric(as.character((closest_to_fil4$nde)))
closest_to_fil4$peh<-as.numeric(as.character((closest_to_fil4$peh)))
closest_to_fil4$rs1<-as.numeric(as.character((closest_to_fil4$rs1)))
closest_to_fil4$rs2<-as.numeric(as.character((closest_to_fil4$rs2)))
fil4<- closest_to_fil4 %>%
filter(sil=="Wt") # Las secuencias malas son 666. casifil* tienen 7719 obs.
# fil4 tiene 7719-666=7053
write_excel_csv(fil4, "/run/media/murphy/lolita/doctorado/clean/fil4.csv")
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial")
svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
ggsave(svgplot, width = 20, units = "cm")
ggsave(pngplot, width = 20, units = "cm")
}
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_bue")
buenas<-c("P00918", "P00698", "P00760", "P02766", "P00644", "P42212", "P02185", "O60885", "P61823", "P28720", "P07900", "P0DTD1", "P19491", "O26232", "P22629", "P03367", "P68400", "Q16539", "P14174", "P01116", "P01112", "P00282", "P06873", "P16113", "P00772")
for (k in seq(1,length(buenas)))
{
ggplot(filter(fil4, ide==buenas[k]), aes(x=peh)) + geom_histogram(binwidth = 0.5) + facet_wrap( ~ gpo) + xlab("pH") + ylab ("Número de entradas") + coord_cartesian(ylim = c(1, 20)) + geom_hline(yintercept=5, linetype="dashed", color = "red")
svgplot<-paste("hist_pH_by_gpo_", buenas[k], ".svg", sep="" )
pngplot<-paste("hist_pH_by_gpo_", buenas[k], ".png", sep="" )
ggsave(svgplot, width = 20, units = "cm")
ggsave(pngplot, width = 20, units = "cm")
}
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial")
svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
#ggsave(svgplot, width = 20, units = "cm")
#ggsave(pngplot, width = 20, units = "cm")
}
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial")
#svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
#pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
#ggsave(svgplot, width = 20, units = "cm")
#ggsave(pngplot, width = 20, units = "cm")
}
#setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial")
#svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
#pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
#ggsave(svgplot, width = 20, units = "cm")
#ggsave(pngplot, width = 20, units = "cm")
}
#setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_bue")
buenas<-c("P00918", "P00698", "P00760", "P02766", "P00644", "P42212", "P02185", "O60885", "P61823", "P28720", "P07900", "P0DTD1", "P19491", "O26232", "P22629", "P03367", "P68400", "Q16539", "P14174", "P01116", "P01112", "P00282", "P06873", "P16113", "P00772")
for (k in seq(1,length(buenas)))
{
ggplot(filter(fil4, ide==buenas[k]), aes(x=peh)) + geom_histogram(binwidth = 0.5) + facet_wrap( ~ gpo) + xlab("pH") + ylab ("Número de entradas") + coord_cartesian(ylim = c(1, 20)) + geom_hline(yintercept=5, linetype="dashed", color = "red")
#svgplot<-paste("hist_pH_by_gpo_", buenas[k], ".svg", sep="" )
#pngplot<-paste("hist_pH_by_gpo_", buenas[k], ".png", sep="" )
#ggsave(svgplot, width = 20, units = "cm")
#ggsave(pngplot, width = 20, units = "cm")
}
# knitr::opts_chunk$set(eval = FALSE)
library(dplyr)
library(ggplot2)
library(readr)
library(knitr)
library(kableExtra)
library(stringdist)
library(svglite)
setwd("/run/media/murphy/lolita/doctorado/extract/")
info <- read_delim("information_from_xrays",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
# La configuración regional de mi sistema está en inglés.
# `R` también por lo que no reconoce '¿'.
pdb<-info$X1
nde<-stringr::str_replace(info$X2, '�', '')
tde<-stringr::str_replace(info$X3, '�', '')
ide<-stringr::str_replace(info$X4, '�', '')
nom<-stringr::str_replace(info$X5, '�', '')
tec<-stringr::str_replace(info$X6, '�', '')
peh<-stringr::str_replace(info$X7, '�', '')
con<-stringr::str_replace(info$X8, '�', '')
rs1<-stringr::str_replace(info$X9, '�', '')
rs2<-stringr::str_replace(info$X10, '�', '')
gpo<-stringr::str_replace(info$X11, '�', '')
doi<-stringr::str_replace(info$X12, '�', '')
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuidado con el tipo de las columnas.
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
datos$rs2<-as.numeric(as.character((datos$rs2)))
# Verificamos los datos al graficar algunas variables interesantes:
theme_set(theme_bw())
# Histograma del pH.
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggsave("histograma_todo_xrays_ph.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_ph.svg", width = 20, units = "cm")
# Histograma de la resolución.
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggsave("histograma_todo_xrays_res.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_res.svg", width = 20, units = "cm")
# Histograma del número de entidades.
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
ggsave("histograma_todo_xrays_nde.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_nde.svg", width = 20, units = "cm")
# Determina cuántos tipos de grupos espaciales y de entidades.
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
tab_gpo<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))
tab_tde<-datos %>%
count(tde, name = "cta_tde") %>%
arrange(desc(cta_tde))
# Gráfico de barras de los grupos espaciales.
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
ggsave("barras_todo_xrays_gpo.png", width = 20, units = "cm")
ggsave("barras_todo_xrays_gpo.svg", width = 20, units = "cm")
# Es interesante notar que el número de grupos espaciales es mayor a 65.
gpo_rar <- df2 %>%
filter(cta_gpo <= 15)
# Gráfico de barras de los grupos espaciales menos comunes.
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
ggsave("histograma_todo_xrays_gpo_rar.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_gpo_rar.svg", width = 20, units = "cm")
# Genera tablas.
# Tabla de grupos espaciales en el PDB.
kable(tab_gpo) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Tabla del tipo de entidades en el PDB.
kable(tab_tde) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
rm(info, df1, datos)
# Guarda los datos como `.csv`.
write_excel_csv(df2, "/run/media/murphy/lolita/doctorado/extract/df2.csv")
#setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial")
#svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
#pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
#ggsave(svgplot, width = 20, units = "cm")
#ggsave(pngplot, width = 20, units = "cm")
}
library(dplyr)
library(ggplot2)
library(readr)
library(knitr)
library(kableExtra)
library(stringdist)
library(svglite)
setwd("/run/media/murphy/lolita/doctorado/extract/")
info <- read_delim("information_from_xrays",
"¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
# La configuración regional de mi sistema está en inglés.
# `R` también por lo que no reconoce '¿'.
pdb<-info$X1
nde<-stringr::str_replace(info$X2, '�', '')
tde<-stringr::str_replace(info$X3, '�', '')
ide<-stringr::str_replace(info$X4, '�', '')
nom<-stringr::str_replace(info$X5, '�', '')
tec<-stringr::str_replace(info$X6, '�', '')
peh<-stringr::str_replace(info$X7, '�', '')
con<-stringr::str_replace(info$X8, '�', '')
rs1<-stringr::str_replace(info$X9, '�', '')
rs2<-stringr::str_replace(info$X10, '�', '')
gpo<-stringr::str_replace(info$X11, '�', '')
doi<-stringr::str_replace(info$X12, '�', '')
datos<-data.frame(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi)
# Cuidado con el tipo de las columnas.
datos$nde<-as.numeric(as.character((datos$nde)))
datos$peh<-as.numeric(as.character((datos$peh)))
datos$rs1<-as.numeric(as.character((datos$rs1)))
datos$rs2<-as.numeric(as.character((datos$rs2)))
# Verificamos los datos al graficar algunas variables interesantes:
theme_set(theme_bw())
# Histograma del pH.
ggplot(data = datos, aes(x=peh)) + geom_histogram(binwidth = 0.5) + labs(x="pH", y="Frecuencia") + xlim(1, 11)
ggsave("histograma_todo_xrays_ph.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_ph.svg", width = 20, units = "cm")
# Histograma de la resolución.
ggplot(data = datos, aes(x=rs1)) + geom_histogram(binwidth = 0.1) + labs(x="Resolución (Å)", y="Frecuencia")
ggsave("histograma_todo_xrays_res.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_res.svg", width = 20, units = "cm")
# Histograma del número de entidades.
ggplot(data = datos, aes(x=nde)) + geom_histogram(binwidth = 1) + labs(x="Número de entidades", y="Frecuencia")
ggsave("histograma_todo_xrays_nde.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_nde.svg", width = 20, units = "cm")
# Determina cuántos tipos de grupos espaciales y de entidades.
df1<-datos %>%
add_count(gpo, name = "cta_gpo")
df2<-df1 %>%
add_count(tde, name = "cta_tde")
tab_gpo<-datos %>%
count(gpo, name = "cta_gpo") %>%
arrange(desc(cta_gpo))
tab_tde<-datos %>%
count(tde, name = "cta_tde") %>%
arrange(desc(cta_tde))
# Gráfico de barras de los grupos espaciales.
ggplot(data = df1, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia") + theme(axis.text.x = element_text(angle = 90))
ggsave("barras_todo_xrays_gpo.png", width = 20, units = "cm")
ggsave("barras_todo_xrays_gpo.svg", width = 20, units = "cm")
# Es interesante notar que el número de grupos espaciales es mayor a 65.
gpo_rar <- df2 %>%
filter(cta_gpo <= 15)
# Gráfico de barras de los grupos espaciales menos comunes.
ggplot(data = gpo_rar, aes(x=reorder(gpo, cta_gpo))) + geom_bar() + labs(x="Grupo espacial", y="Frecuencia", title = "Grupos espaciales con una frecuencia menor o igual a 15") + coord_flip()#+ theme(axis.text.x = element_text(size = 12, angle = 45))
ggsave("histograma_todo_xrays_gpo_rar.png", width = 20, units = "cm")
ggsave("histograma_todo_xrays_gpo_rar.svg", width = 20, units = "cm")
# Genera tablas.
# Tabla de grupos espaciales en el PDB.
kable(tab_gpo) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
# Tabla del tipo de entidades en el PDB.
kable(tab_tde) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
rm(info, df1, datos)
# Guarda los datos como `.csv`.
write_excel_csv(df2, "/run/media/murphy/lolita/doctorado/extract/df2.csv")
# Filtro 0
fil0 <-df2 %>%
filter(!ide =="") # Si no tiene identificador se va.
# Filtro 1
fil1 <- fil0 %>%
filter(rs1 <= 2.0) # Mala resolución no me sirve.
# Filtro 2
fil2 <-fil1 %>%
filter(!is.na(peh)) # Si no tiene pH se va.
setwd("/run/media/murphy/lolita/doctorado/clean")
write_excel_csv(fil0, "fil0.csv")
write_excel_csv(fil1, "fil1.csv")
write_excel_csv(fil2, "fil2.csv")
# Carga fil3.
fil3 <- read_csv("/run/media/murphy/lolita/doctorado/clean/fil3.csv")
fil3cola <- fil3 %>%
count(ide, name="cta_ide") %>% # Colapsa los datos hacia n
arrange(desc(cta_ide))
fil3nocola <- fil3 %>% # Agrega n a los datos
add_count(ide, name="cta_ide") %>%
arrange(desc(cta_ide))
# Una tabla
tab_fil3cola<-head(fil3cola, n=50) #Aquí escoge n.
kable(tab_fil3cola) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width=F)
setwd("/run/media/murphy/lolita/doctorado/clean")
write_excel_csv(fil3cola, "fil3cola.csv")
write_excel_csv(fil3nocola, "fil3nocola.csv")
write_excel_csv(tab_fil3cola, "tab_fil3cola.csv")
# Extrae las 50 proteínas más representadas en el PDB y según filtros previos.
ide_in_tf3c <- tab_fil3cola$ide
for (j in seq(1,50))
{
ide_i_ <-ide_in_tf3c[[j]]
filename <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/", ide_i_, sep="")
# Escribe un archivo por cada identificador, a partir de fil3.
write_excel_csv(filter(fil3, ide==ide_i_), filename)
}
# Para cada proteína compara su secuencia canónica con su secuencia consenso.
# Se asigna una etiqueta "Wt" o "NotWt" dependiendo del resultado.
for (j in seq(1,50))
{
ide <-ide_in_tf3c[[j]] # identificador
file1 <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/can_seq_", ide, ".csv", sep="")
impo1 <- read_delim(file1, "¿", escape_double = FALSE, col_names = FALSE,
comment = "*>", trim_ws = TRUE)
pdb<-impo1$X1
nde<-stringr::str_replace(impo1$X2, '�', '')
tde<-stringr::str_replace(impo1$X3, '�', '')
sec0<-stringr::str_replace(impo1$X4, '�', '')
sec<-stringr::str_replace_all(sec0, '\\\\n', '')
oname1 = paste("df", "_", ide, sep="")
assign(oname1, data.frame(pdb, nde, tde, sec))
file2 <- paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/cons_", ide, "_c", sep="")
impo2 <- read_csv(file2, col_names = FALSE)
oname2 = paste("cons_", ide, sep="")
assign(oname2, impo2$X1)
n<-nrow(get(oname1))
bad_seq<-c() # Vacío
for(i in seq(1, n)) {
y <- adist(get(oname1)$sec[i], get(oname2))
if(y >= 15)
{bad_seq <- c(bad_seq, "NotWt")}
else
{bad_seq <- c(bad_seq, "Wt")}
}
assign(oname1, cbind(get(oname1), bad_seq))
file3 <-paste("/run/media/murphy/lolita/doctorado/clean/fil4/msa/fil4_", ide, sep="")
write_excel_csv(get(oname1), file3)
}
# Aplica finalmente el filtro 4 sobre las 50 proteínas más representadas.
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/msa")
info_fil3 <- read_delim("information_from_fil3", "¿", escape_double = FALSE, col_names = FALSE, comment = "*>", trim_ws = TRUE)
almost_fil4 <- read_csv("almost_fil4", col_names = FALSE)
almost_fil4<-rename(almost_fil4, bad=X5)
allbadseqs <-select(almost_fil4, bad)
nearly_almost_fil4<-cbind(info_fil3, allbadseqs)
pdb<-nearly_almost_fil4$X1
nde<-stringr::str_replace(nearly_almost_fil4$X2, '�', '')
tde<-stringr::str_replace(nearly_almost_fil4$X3, '�', '')
ide<-stringr::str_replace(nearly_almost_fil4$X4, '�', '')
nom<-stringr::str_replace(nearly_almost_fil4$X5, '�', '')
tec<-stringr::str_replace(nearly_almost_fil4$X6, '�', '')
peh<-stringr::str_replace(nearly_almost_fil4$X7, '�', '')
con<-stringr::str_replace(nearly_almost_fil4$X8, '�', '')
rs1<-stringr::str_replace(nearly_almost_fil4$X9, '�', '')
rs2<-stringr::str_replace(nearly_almost_fil4$X10, '�', '')
gpo<-stringr::str_replace(nearly_almost_fil4$X11, '�', '')
doi<-stringr::str_replace(nearly_almost_fil4$X12, '�', '')
sil<-nearly_almost_fil4$bad
closest_to_fil4<-tibble(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi, sil)
rm(pdb, nde, tde, ide, nom, tec, peh, con, rs1, rs2, gpo, doi, sil)
# Cuidado con el tipo de las columnas, de nuevo.
closest_to_fil4$nde<-as.numeric(as.character((closest_to_fil4$nde)))
closest_to_fil4$peh<-as.numeric(as.character((closest_to_fil4$peh)))
closest_to_fil4$rs1<-as.numeric(as.character((closest_to_fil4$rs1)))
closest_to_fil4$rs2<-as.numeric(as.character((closest_to_fil4$rs2)))
fil4<- closest_to_fil4 %>%
filter(sil=="Wt") # Las secuencias malas son 666. casifil* tienen 7719 obs.
# fil4 tiene 7719-666=7053
write_excel_csv(fil4, "/run/media/murphy/lolita/doctorado/clean/fil4.csv")
#setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial")
#svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
#pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
#ggsave(svgplot, width = 20, units = "cm")
#ggsave(pngplot, width = 20, units = "cm")
}
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_all")
# Histogramas con datos de fil4
for (j in seq(1,50))
{
id <-tab_fil3cola$ide[j]
print(ggplot(filter(fil4, ide==id), aes(x=factor(gpo), y=peh)) + geom_boxplot() + coord_flip() + ylab("pH") + xlab("Grupo espacial"))
svgplot<-paste("box_pH_by_gpo_", id, ".svg", sep="" )
pngplot<-paste("box_pH_by_gpo_", id, ".png", sep="" )
ggsave(svgplot, width = 20, units = "cm")
ggsave(pngplot, width = 20, units = "cm")
}
setwd("/run/media/murphy/lolita/doctorado/clean/fil4/plots_bue")
buenas<-c("P00918", "P00698", "P00760", "P02766", "P00644", "P42212", "P02185", "O60885", "P61823", "P28720", "P07900", "P0DTD1", "P19491", "O26232", "P22629", "P03367", "P68400", "Q16539", "P14174", "P01116", "P01112", "P00282", "P06873", "P16113", "P00772")
for (k in seq(1,length(buenas)))
{
print(ggplot(filter(fil4, ide==buenas[k]), aes(x=peh)) + geom_histogram(binwidth = 0.5) + facet_wrap( ~ gpo) + xlab("pH") + ylab ("Número de entradas") + coord_cartesian(ylim = c(1, 20)) + geom_hline(yintercept=5, linetype="dashed", color = "red"))
svgplot<-paste("hist_pH_by_gpo_", buenas[k], ".svg", sep="" )
pngplot<-paste("hist_pH_by_gpo_", buenas[k], ".png", sep="" )
ggsave(svgplot, width = 20, units = "cm")
ggsave(pngplot, width = 20, units = "cm")
}
